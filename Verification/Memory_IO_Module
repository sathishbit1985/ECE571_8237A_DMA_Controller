module Memory(SystemBusIF.MemoryDevice pin);

logic [7:0] Mem[16'hFFFF:0];
logic [15:0]Addr;
int i=0;

initial
begin
for(i=0;i<16'hFFFF;i++)
Mem[i]=0;
end

always_ff@(posedge pin.Clock)
begin
Addr <= pin.Address;
end

assign pin.Data = ~pin.nMEMR ? Mem[Addr] : 'z;

always@(posedge pin.Clock)
begin
if(~pin.nMEMW)
Mem[Addr] <= pin.Data;
end

endmodule


module IO(input logic Dmatransfer, input logic Clock, Reset, Dack, nIOR, nIOW, inout [7:0] Data, output logic Dreq,output logic [7:0] Buffer[]);

logic [7:0] Bufferdata;
int i=0;
 
always_comb
begin
if(Dmatransfer)
Dreq = 1;
if(Dack)
Dreq = 0;
end 

assign Data = (Dack && ~nIOR) ? Bufferdata : 'z;

always@(posedge Clock)
begin
if(Dack && ~nIOW)
begin
Buffer = new[i+1](Buffer);
Buffer[i] = Data ;
i = i+1;
end
if(Dack && ~nIOR)
begin
Buffer = new[i+1](Buffer);
Buffer[i] = $random;
Bufferdata = Buffer[i];
i=i+1;
end
end

endmodule

module IODevices(input logic [3:0]Dmatransfer,SystemBusIF.IODevice pin,output logic [7:0] IOBuffer1[] , output logic [7:0] IOBuffer2[] ,output logic [7:0] IOBuffer3[],output logic [7:0] IOBuffer4[] );

  IO M1 (Dmatransfer[0],pin.Clock, pin.Reset, pin.Dack[0], pin.nIOR, pin.nIOW, pin.Data, pin.Dreq[0],IOBuffer1);
  IO M2 (Dmatransfer[1],pin.Clock, pin.Reset, pin.Dack[1], pin.nIOR, pin.nIOW, pin.Data, pin.Dreq[1],IOBuffer2);  
  IO M3 (Dmatransfer[2],pin.Clock, pin.Reset, pin.Dack[2], pin.nIOR, pin.nIOW, pin.Data, pin.Dreq[2],IOBuffer3);  
  IO M4 (Dmatransfer[3],pin.Clock, pin.Reset, pin.Dack[3], pin.nIOR, pin.nIOW, pin.Data, pin.Dreq[3],IOBuffer4);

endmodule


module test;
logic Clock=1;
logic [7:0] IOData,MemoryData;
logic [3:0]Dmatransfer;
logic [7:0] IOBuffer1[],IOBuffer2[],IOBuffer3[],IOBuffer4[];
logic Reset;
int n=0;

typedef struct packed{
logic [3:0] channel; 
logic [7:0] Delay1,Delay2,Delay3,Delay4;
}Dmarequest;

Dmarequest D;

SystemBusIF MainBus(Clock,Reset);

Memory M1 (MainBus);
IODevices M2 (Dmatransfer,MainBus,IOBuffer1,IOBuffer2,IOBuffer3,IOBuffer4);

initial
  forever #1 Clock =~Clock;

    
initial
  begin
      
    @(negedge Clock) MainBus.Dack = '0;
                     MainBus.nIOW = 1;
                     MainBus.nIOR = 1;
                     MainBus.nMEMW=1;
                     MainBus.nMEMR = 1;
   @(negedge Clock)  D.channel = 4'b0001;
                     D.Delay1='0;
                     D.Delay2='0;
                     D.Delay3='0;
                     D.Delay4='0;
                     Dmaaccess(D);
    @(negedge Clock) MainBus.Dack[0] = 1;
    @(negedge Clock) MainBus.Address=0;
    @(negedge Clock) MainBus.nIOR = 0;
                     MainBus.nMEMW = 0;
               
    repeat(9) @(negedge Clock) MainBus.Address=MainBus.Address+1;
    
    @(negedge Clock) MainBus.nIOR = 1;
                     MainBus.nMEMW = 1;
    @(negedge Clock) MainBus.nMEMR = 0;
                     MainBus.Address =0;

    for(n=0;n<(IOBuffer1.size());n++)
      begin
        MemoryData = MainBus.Data;
        IOData = IOBuffer1[n];
        $display("%h,%h %h",IOData,MemoryData,MainBus.Address);
        MainBus.Address = MainBus.Address+1;
        #2;
      end
    $finish;
    end
  
task Dmaaccess(input Dmarequest Dma);

fork
begin
if(Dma.channel[0]== 1)
begin
#(Dma.Delay1);
Dmatransfer[0] = 1;
#2;
Dmatransfer[0] = 0;
end
else
Dmatransfer[0] = 0;
end

begin
if(Dma.channel[1]== 1)
begin
#(Dma.Delay2);
Dmatransfer[1] = 1;
#2;
Dmatransfer[1] = 0;
end
else
Dmatransfer[1] = 0;
end


begin
if(Dma.channel[2] == 1)
begin
#(Dma.Delay3);
Dmatransfer[2] = 1;
#2;
Dmatransfer[2] = 0;
end
else
Dmatransfer[2] = 0;
end

begin
if(Dma.channel[3] == 1)
begin
#(Dma.Delay4);
Dmatransfer[3] = 1;
#2;
Dmatransfer[3] = 0;
end
else
Dmatransfer[3] = 0;
end

join
endtask
  
  
initial
  begin
    $dumpfile("dump.vcd"); $dumpvars;
  end
    
endmodule
