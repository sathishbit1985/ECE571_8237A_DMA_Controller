`timescale 1ns / 1ps
`define DEBUG
//////////////////////////////////////////////////////////////////////////////////
// Name: Kaavya Thrilochan
// Module Name: Priority Encoder (Arbiter)
// ECE571 Final Project Spring 2022
// DMA Controller - Verification Team
/////////////////////////////////////////////////////////////////////////////////
module arbiter_tb();

    parameter TRUE = 1'b1;
    parameter FALSE = 1'b0;
    parameter CLOCK_CYCLE = 40;
    parameter CLOCK_WIDTH = CLOCK_CYCLE/2;
    parameter IDLE_CLOCKS = 2;
	parameter FIXEDPRIORITY = 0;
	parameter ROTATINGPRIORITY = 1;
	
	//inputs
	logic Clock, Reset, Hlda, CheckPriority, SenseDreq, SenseDack;
	logic [3:0] CheckMask;
	logic [3:0] ipDreq; 
	
	//outputs
    logic [1:0] ReqID;
    logic [3:0] Dack_Act;
    logic ValidDreq;
	
	//intermediate variables
	logic [3:0] ipDreq_Final;
	logic [3:0] Dack_Final, Dack_exp;
	int error = 0;
	

	
    PriorityEncoder DUT(Clock, Reset, ipDreq, Hlda, CheckPriority, SenseDreq, SenseDack, CheckMask, Dack_Act, ReqID, ValidDreq);
		
    
    //create running clock.
    initial
    begin
    Clock = FALSE;
    forever #CLOCK_WIDTH Clock = ~Clock;
    end
    
    //generate Reset signal
    initial
    begin
    Reset = TRUE;
    repeat (IDLE_CLOCKS) @(negedge Clock);
    Reset = FALSE;
    end
	
     //stimulus to DUT.
    initial
    begin
	Dreq_dir_test;
	FixedArbiter_check(ReqID, ValidDreq);
	@(negedge Clock);
	Dreq_rand_test;
	FixedArbiter_check(ReqID, ValidDreq);
    $finish;
    end
	
	   
	// Directed Test -------	
    task Dreq_dir_test();
		repeat (1) @(negedge Clock);
		Hlda = 1'b0; CheckPriority = 1'b0; SenseDreq = 1'b0; SenseDack = 1'b0; CheckMask = 4'b0000;
		ipDreq = 4'b1100; 
		@(negedge Clock);
		Hlda = 1'b1; CheckPriority = 1'b0; SenseDreq = 1'b0; SenseDack = 1'b0; CheckMask = 4'b0000; 
		ipDreq = 4'b1100;
		@(negedge Clock);
		Hlda = 1'b1; CheckPriority = 1'b0; SenseDreq = 1'b1; SenseDack = 1'b0; CheckMask = 4'b0000; 
		ipDreq = 4'b1100;
	endtask    
	
	
	// Random Test -------
	task Dreq_rand_test();
	   repeat(20)begin
	   Hlda = 1'b1; CheckPriority = 1'b0; SenseDreq = 1'b0; SenseDack = 1'b0; CheckMask = 4'b0000; 
			ipDreq = $urandom_range(0,15);
			repeat (1) @(negedge Clock);
	   end
	endtask 

    // Polarity check ------
	assign ipDreq_Final = (SenseDreq) ? ~ipDreq : ipDreq;
    assign Dack_Final = (SenseDack) ? Dack_exp : ~Dack_exp;
	assign CheckPriority = (CheckPriority) ? ROTATINGPRIORITY : FIXEDPRIORITY;	
	
	
	
	//In any cycle, there can be only one grant signal that can be asserted.
	a1: assert property (@(posedge Clock) $onehot (Dack_Act)); 
	
	//Each requesting agent should get a grant signal in a maximum 4 cycle window.
	a2: assert property (@(posedge Clock) (ipDreq==0010) |-> ##[0:4] (Dack_Act==0010));
	
	//If there are no requests, there cannot be any grants asserted
	a3: assert property (@(posedge Clock) (ipDreq==0000) |-> (Dack_Act == 0000));
	
	
	// Sanity Check -------
	task FixedArbiter_check;
	output [1:0] ReqID_exp;
    output	ValidDreq_exp;
     begin
	
		if (CheckPriority ==  0) begin //fixed
			for (int i = 0; i < 4; i++) begin
				if (ipDreq[i]) begin
				
					ReqID_exp = i;
				end
					if (ReqID_exp == 2'b00)
					Dack_exp = 4'b0001;
					else if (ReqID_exp == 2'b01)
					Dack_exp = 4'b0010;
					else if (ReqID_exp == 2'b10)
					Dack_exp = 4'b0100;
					else if (ReqID_exp == 2'b11)
					Dack_exp = 4'b1000;
					
			ValidDreq_exp = 1;
			
			`ifdef DEBUG
			if(ReqID_exp !== ReqID) begin
				error = error + 1;
				$display("ERROR: EXP ReqID:%b :: DUT ReqID: %b",ReqID_exp,ReqID);
				end
			else if (Dack_Final !== Dack_Act) begin
				error = error + 1;
				$display("ERROR: EXP Dack:%b :: DUT Dack: %b",Dack_Final,Dack_Act);
				end
			else if (ValidDreq_exp !== ValidDreq) begin
				error = error + 1;
				$display("ERROR: EXP ValidDreq:%b :: DUT ValidDreq: %b",ValidDreq_exp,ValidDreq);
				end
			else begin
				$display("PASS : EXP ReqID:%b :: DUT ReqID: %b :: EXP Dack:%b :: DUT Dack: %b :: EXP ValidDreq:%b :: DUT ValidDreq: %b",ReqID_exp,ReqID,Dack_Final,Dack_Act,ValidDreq_exp,ValidDreq);
				end
			 `endif
		end
		end
		end
	endtask
		 
	
	initial
		begin

		`ifdef DEBUG
		  $dumpfile("dump.vcd"); $dumpvars;
		`endif
		
		end
endmodule

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
